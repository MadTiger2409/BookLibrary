// <auto-generated />
using System;
using BookLibrary.Infrastructure.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLibrary.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BookLibrary.Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookLibrary.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BookLibrary.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "Admin",
                            PasswordHash = new byte[] { 33, 173, 185, 225, 35, 187, 51, 176, 89, 232, 184, 222, 111, 219, 212, 232, 172, 215, 208, 105, 95, 51, 223, 194, 169, 54, 125, 40, 195, 213, 190, 145, 199, 174, 176, 160, 225, 53, 5, 119, 238, 132, 77, 204, 90, 151, 68, 130, 252, 16, 110, 8, 238, 182, 66, 238, 192, 54, 180, 228, 86, 119, 146, 67 },
                            Salt = new byte[] { 137, 123, 123, 205, 164, 116, 20, 175, 73, 203, 26, 98, 141, 86, 206, 78, 182, 5, 201, 25, 164, 220, 157, 158, 15, 66, 240, 121, 90, 63, 24, 44, 145, 111, 173, 13, 43, 250, 244, 75, 112, 174, 40, 194, 66, 137, 167, 212, 136, 16, 7, 177, 162, 111, 197, 134, 131, 207, 253, 19, 29, 160, 122, 38, 148, 66, 6, 33, 118, 5, 182, 93, 136, 47, 183, 183, 147, 78, 115, 22, 232, 231, 81, 220, 9, 108, 11, 217, 41, 78, 136, 33, 80, 132, 1, 54, 188, 162, 39, 217, 19, 187, 83, 169, 208, 128, 139, 210, 5, 13, 144, 134, 91, 77, 60, 74, 140, 164, 225, 62, 119, 9, 74, 152, 216, 127, 48, 142 }
                        });
                });

            modelBuilder.Entity("BookLibrary.Domain.Models.Reservation", b =>
                {
                    b.HasOne("BookLibrary.Domain.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
